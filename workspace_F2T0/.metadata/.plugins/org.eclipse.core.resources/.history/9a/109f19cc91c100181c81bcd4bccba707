package main;
import java.util.ArrayList;


import org.opencv.videoio.VideoCapture;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;

import javax.imageio.ImageIO;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

import script.Script;



import display.*;

public class Main {

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public static String FILES="/home/simon/Bureau/F2T_images/";	// path to images
	//public static String FILES="./";
	public static String IMG="img/";								// sub paths to image types
	public static String PRESET="preset/";
	public static String AREA="area/";
	public static String SCRIPT="script/";
	public static String SOUND="sound/";
	
	public static int LENGTH=500;									// length of the trace
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// serial interface
	public Interface inter;
	
	
	// main display frames
	public SourceFrame sourceFrame;
	
	// four display frames
	private ViewPortFrame viewPort;
	private ViewPortFrame areaDisplay;
	
	// tactile image with all properties
	public Image image;
	
	// script with all command lines
	public Script script;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	

	// position of cursor, previous and predicted
	public float x=0;
	public float y=0;
	
	public float x_prev=0;
	public float y_prev=0;

	public float x_next=0;
	public float y_next=0;
	
	
	// joystick input values	
	public float dx=0;
	public float dy=0;
	
	// trace buffer
	public float[][] trace;
	public int time;
	public int count;

		
	// list of sound sources
	public ArrayList<SoundSource> soundSources;
	
	
	//////////////////////////////////////////////////////////////

	public Mat map=new Mat();
	
	///////////////////////////////////////////////////////////////
	
	public String presetName;
	
	public String[] listImages;
	public String[] listPreset;
	public String[] listArea;
	public String[] listScript;
	
	public int selected_img=-1;
	
	
	///////////////////////////////////////////////////////////////
	public Main(){
		
		time=0;
		count=0;
		trace=new float[LENGTH][2];
		
		///////////////////////////////////////////////////////////////////////////////////////////////
		
		

		image=new Image();

		inter=new Interface();
		
		script=new Script(this);
		
		listFiles();
		
		///////////////////////////////////////////////////////////////////////////////////////////////
		soundSources=new ArrayList<SoundSource>();
		
		sourceFrame=new SourceFrame(this);
		
		//////////////////////////////////////////////////////////////////////////////////////////
		while (true){

			
			////////////////////////////////////////////////////////////////////////
			// get position : get x, y, x_prev, y_prev and predict x_next and y_next
			getTouchedPosition();
			

			///////////////////////////////////////////////////////////
			// get user speed dx and dy
			getUserMovement();
			

			
			//////////////////////////////
			// update display panels
			if (viewPort!=null) viewPort.repaint();
			if (areaDisplay   !=null) areaDisplay.repaint();
			
			sourceFrame.repaint();

			
			//////////////////////////////
			// update user trace
			updateTrace();
			
			
			
			
			//////////////////////////////
			// story script
			script.detect(350+(int)(x+dx),270-(int)(y+dy));
			
			

			//////////////////////////////
			// compute sound sources positions
			for (int i=0;i<soundSources.size();i++){
				soundSources.get(i).compute(x, y);
			}
		}
	}
	
	
	///////////////////////////////////////////////////////////////////////////////////
	
	public void listFiles(){
		
		setPicture(null);
		setTactile(null);
		setFlow(null);
		setRail(null);
		
		File repertoire = new File(FILES+IMG);
		if (repertoire.exists()){
			listImages=repertoire.list();
		}
		else System.out.println("Image file directory does not exist");
		
		repertoire = new File(FILES+TACTILE);
		if (repertoire.exists()){
			listTactile=repertoire.list();
		}
		else System.out.println("Tactile file directory does not exist");
		
		repertoire = new File(FILES+FLOW);
		if (repertoire.exists()){
			listFlow=repertoire.list();
		}
		else System.out.println("Flow file directory does not exist");
		
		repertoire = new File(FILES+RAIL);
		if (repertoire.exists()){
			listRail=repertoire.list();
		}
		else System.out.println("Rail file directory does not exist");
		
		repertoire = new File(FILES+PATH);
		if (repertoire.exists()){
			listPath=repertoire.list();
		}
		else System.out.println("Path file directory does not exist");
		
		repertoire = new File(FILES+PRESET);
		if (repertoire.exists()){
			listPreset=repertoire.list();
		}
		else System.out.println("Preset file directory does not exist");
		
		repertoire = new File(FILES+PATH);
		if (repertoire.exists()){
			listPath=repertoire.list();
		}
		else System.out.println("Path file directory does not exist");
		
		repertoire = new File(FILES+SCRIPT);
		if (repertoire.exists()){
			listScript=repertoire.list();
		}
		else System.out.println("Script file directory does not exist");
		
		// get a name to save a preset
		boolean found=false;
		
		int i=0;
		presetName="preset0";
		while (!found){
			presetName="preset"+i;
			found=true;
			int n=0;
			while (found && n<listPreset.length){
				if (presetName.equals(listPreset[n])) found=false;
				n++;
			}
			i++;
		}
		
		i=0;
		pathName="path0";
		while (!found){
			presetName="path"+i;
			found=true;
			int n=0;
			while (found && n<listPath.length){
				if (pathName.equals(listPath[n])) found=false;
				n++;
			}
			i++;
		}
	}
	
	
	public void savePreset(){
		
		if (image.view==null && image.tactile==null && image.flow==null && image.rail==null){
			System.out.println("No element selected, pre-set not saved");
		}
		else{
			
			System.out.println("save preset "+presetName);
			
			
			String fileName = FILES+PRESET+presetName;
			
			try {
				PrintWriter file  = new PrintWriter(new FileWriter(fileName));
				
				if (image.view!=null)    file.println("image "+image.view);
				if (image.tactile!=null) file.println("tactile "+image.tactile);
				if (image.flow!=null)    file.println("flow "+image.flow);
				if (image.rail!=null)    file.println("rail "+image.rail);
				
				file.close();
				System.out.println("preset saved");
			}
			catch (Exception e) {e.printStackTrace();}
			
			
			listFiles();
		}
	}
	
	
	public void savePath(){
		if (target.size()==0) System.out.println("No path to save");
		else{
			System.out.println("save path "+pathName);
			
			
			String fileName = FILES+PATH+pathName;
			
			try {
				PrintWriter file  = new PrintWriter(new FileWriter(fileName));
				
				for (int i=0;i<target.size();i++){
					file.println("t "+target.get(i).x+" "+target.get(i).y+" "+target.get(i).speed+" "+target.get(i).control);
				}
				
				file.close();
				System.out.println("path saved");
			}
			catch (Exception e) {e.printStackTrace();}
		}
	}
	
	
	public void setPreset(int id){
		System.out.println("Preset "+id+" : "+listPreset[id]);
		
		String fileName = Main.FILES+PRESET+listPreset[id];
		String[] elements;
		
		String img_file=null;
		String tactile_file=null;
		String flow_file=null;
		String rail_file=null;
		
		target.clear();
		
		try {
			InputStream ips=new FileInputStream(fileName); 
			InputStreamReader ipsr=new InputStreamReader(ips);
			BufferedReader br=new BufferedReader(ipsr);
			String line;

			line=br.readLine();
			
			while (line!=null){
				elements=line.split(" ");
				if (elements.length>0){
					if (elements[0].equals("image")) img_file=elements[1];
					else if (elements[0].equals("tactile")) tactile_file=elements[1];
					else if (elements[0].equals("flow")) flow_file=elements[1];
					else if (elements[0].equals("rail")) rail_file=elements[1];
					else if (elements[0].equals("path")) setPath(elements[1]);
					else System.out.println("ERROR : wrong keyword");
				}
				line=br.readLine();
			}
			br.close();
			
			setPicture(img_file);
			setTactile(tactile_file);
			setFlow(flow_file);
			setRail(rail_file);
		}
		catch (Exception e) {
			System.out.println("no file found");
		}
	}
	
	
	public void setScript(int id){
		System.out.println("Script "+id+" : "+listScript[id]);
		
		script.setScript(listScript[id]);
		
		setPicture(null);
		setTactile(null);
		setFlow(null);
		setRail(null);
	}
	
	public void setPath(String name){
		String fileName = Main.FILES+PATH+name;
		String[] elements;
		
		try {
			InputStream ips=new FileInputStream(fileName); 
			InputStreamReader ipsr=new InputStreamReader(ips);
			BufferedReader br=new BufferedReader(ipsr);
			String line;
			
			line=br.readLine();
			
			while (line!=null){
				elements=line.split(" ");
				if (elements.length==5 && elements[0].equals("t")){
					target.add(new Target(Integer.parseInt(elements[1]), Integer.parseInt(elements[2]),Integer.parseInt(elements[3]), Integer.parseInt(elements[4]) ));
				}
				line=br.readLine();
			}
			
			br.close();
		}
		catch (Exception e) {
			System.out.println("no file found");
		}
	}
	
	public void setPath(int id){
		String fileName = Main.FILES+PATH+listPath[id];
		String[] elements;
		
		try {
			InputStream ips=new FileInputStream(fileName); 
			InputStreamReader ipsr=new InputStreamReader(ips);
			BufferedReader br=new BufferedReader(ipsr);
			String line;
			
			line=br.readLine();
			
			while (line!=null){
				elements=line.split(" ");
				if (elements.length==5 && elements[0].equals("t")){
					target.add(new Target(Integer.parseInt(elements[1]), Integer.parseInt(elements[2]),Integer.parseInt(elements[3]), Integer.parseInt(elements[4]) ));
				}
				line=br.readLine();
			}
			
			br.close();
		}
		catch (Exception e) {
			System.out.println("no file found");
		}
	}
	
	
	public void setPicture(String img_file){
		image.setPicture(img_file);
		
		if (image.view   !=null && viewPort==null) viewPort=new ViewPortFrame(this, image.view_img);
		else if (image.view!=null && viewPort!=null) viewPort.setImage(image.view_img);
		else if (image.view   ==null && viewPort!=null){
			viewPort.dispose();
			viewPort=null;
		}
		
		selected_img=-1;
		if (img_file!=null){
			for (int i=0;i<listImages.length;i++){
				if (img_file.equals(listImages[i])) selected_img=i;
			}
		}
	}
	
	public void setTactile(String tactile_file){
		image.setTactile(tactile_file);
		
		if (image.tactile!=null && tactileDisplay==null) tactileDisplay=new ViewPortFrame(this, image.tactile_img);
		else if (image.tactile!=null && tactileDisplay!=null) tactileDisplay.setImage(image.tactile_img);
		else if (image.tactile==null && tactileDisplay!=null){
			tactileDisplay.dispose();
			tactileDisplay=null;
		}
		
		selected_tactile=-1;
		if (tactile_file!=null){
			for (int i=0;i<listTactile.length;i++){
				if (tactile_file.equals(listTactile[i])) selected_tactile=i;
			}
		}
	}
	
	public void setFlow(String flow_file){
		image.setFlow(flow_file);
		
		if (image.flow   !=null && flowDisplay==null) flowDisplay =new ViewPortFrame(this, image.flow_img);
		else if (image.flow!=null && flowDisplay!=null) flowDisplay.setImage(image.flow_img);
		else if (image.flow==null && flowDisplay!=null){
			flowDisplay.dispose();
			flowDisplay=null;
		}
		
		selected_flow=-1;
		if (flow_file!=null){
			for (int i=0;i<listFlow.length;i++){
				if (flow_file.equals(listFlow[i])) selected_flow=i;
			}
		}
	}
	
	public void setRail(String rail_file){
		image.setRail(rail_file);
		
		if (image.rail   !=null && railDisplay==null) railDisplay =new ViewPortFrame(this, image.rail_img);
		else if (image.rail!=null && railDisplay!=null) railDisplay.setImage(image.rail_img);
		else if (image.rail==null && railDisplay!=null){
			railDisplay.dispose();
			railDisplay=null;
		}
		
		selected_rail=-1;
		if (rail_file!=null){
			for (int i=0;i<listRail.length;i++){
				if (rail_file.equals(listRail[i])) selected_rail=i;
			}
		}
	}
	
	public void setArea(String area_file){
		image.setArea(area_file);
		
		if (image.area   !=null && areaDisplay==null) areaDisplay =new ViewPortFrame(this, image.area_img);
		else if (image.area   ==null && areaDisplay!=null){
			areaDisplay.dispose();
			areaDisplay=null;
		}
	}
	
	
	///////////////////////////////////////////////////////////
	
	public void getTouchedPosition(){
		
		if (CAMERA_CONNECTED){
			camera.read(webcam);

			
			// vertical
			for (int i=610;i<624;i+=2){
				for (int j=20;j<320;j++){
					double[] color=webcam.get(j, i);
					if (color[0]>100){
						double val=color[0]-Math.max(color[2],color[1]);
						if (val>20){
							color[0]=val;
							color[1]=val;
							color[2]=val;
							map.put(j, i, color);
							map.put(j, i+1, color);
							for (int g=-4;g<4;g++){
								histogram_Y[j+g]+=val*gauss[g+4];
							}
						}
					}
					else{
						color[0]=0;
						color[1]=0;
						color[2]=250;
						map.put(j, i, color);
						map.put(j, i+1, color);
					}
				}
			}
			
			// horizontal
			for (int i=120;i<520;i++){
				for (int j=440;j<460;j+=2){
					double[] color=webcam.get(j, i);
					if (color[0]>100){
						double val=color[0]-Math.max(color[2],color[1]);
						if (val>20){
							color[0]=val;
							color[1]=val;
							color[2]=val;
							map.put(j, i, color);
							map.put(j+1, i, color);
							for (int g=-4;g<4;g++){
								histogram_X[i+g]+=val*gauss[g+4];
							}
						}
					}
					else{
						color[0]=0;
						color[1]=0;
						color[2]=250;
						map.put(j, i, color);
						map.put(j+1, i, color);;
					}
				}
			}
		
		}
		else{
			try {Thread.sleep(100) ;
			}  catch (InterruptedException e) {}
		}
		
		double max_X=20;
		double max_Y=20;
		int imax=-1;
		int jmax=-1;
		
		for (int i=20;i<620;i++){
			if (histogram_X[i]>max_X){
				max_X=histogram_X[i];
				imax=i;
			}
			histogram_X[i]=0;
		}
		for (int j=20;j<460;j++){
			if (histogram_Y[j]>max_Y){
				max_Y=histogram_Y[j];
				jmax=j;
			}
			histogram_Y[j]=0;
		}
		if (imax==-1 || jmax==-1){
			x=160;
			y=120;
		}
		else{
			x_prev=x;
			y_prev=y;
			
			x=-(imax-280)*2;
			y=(jmax-160)*2;
			
			x_next=x + (x-x_prev);
			y_next=y + (y-y_prev);
		}
	}
	
	
	public void getUserMovement(){
		if (inter.ready){
			jx=inter.joystickX;
			jy=inter.joystickY;
			
			dx=jx/200;
			dy=jy/200;

			inter.ready=false;
		}
		
		while (350+(int)(x+dx)>700) x-=2; 
		while (350+(int)(x+dx)<  0) x+=2; 
		while (270-(int)(y+dy)>700) y-=2;
		while (270-(int)(y+dy)<  0) y+=2;
	}
	
	
	public void sendFriction(){
		friction_fluid=(int)(friction_fluid*490);
		if (friction_fluid!=previous_fluid){
			String msg="f";
			if (friction_fluid<10) msg+="00";
			else if (friction_fluid<100) msg+="0";
			msg+=(int)friction_fluid;
			inter.sendMsg(msg);
			
			previous_fluid=(int) friction_fluid;
		}
		
		friction_solid=(int)(friction_solid*490);;
		if (friction_solid!=previous_solid){
			String msg="s";
			if (friction_solid<10) msg+="00";
			else if (friction_solid<100) msg+="0";
			msg+=(int)friction_solid;
			inter.sendMsg(msg);
			
			previous_solid=(int) friction_solid;
		}/**/
	}
	
	
	public void updateTrace(){
		trace[time][0]=x;
		trace[time][1]=y;
		time++;
		if (time>=LENGTH) time=0;
	}
	
	
	///////////////////////////////////////////////////////////
	public static BufferedImage Mat2bufferedImage(Mat image) {
		MatOfByte bytemat = new MatOfByte();
		Imgcodecs.imencode(".jpg", image, bytemat);
		byte[] bytes = bytemat.toArray();
		InputStream in = new ByteArrayInputStream(bytes);
		BufferedImage img = null;
		try {
			img = ImageIO.read(in);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return img;
	}
	
	
	
	
	
	public void close(){
		inter.close();
		script.close();
	}
	
	
	public static void main(String[] args){
		
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
		
		new Main();
	}
	
}
